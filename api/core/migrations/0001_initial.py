# Generated by Django 4.2.21 on 2025-09-27 10:57

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.CharField(blank=True, max_length=128)),
                ('title', models.CharField(blank=True, max_length=255)),
                ('body', models.TextField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentChunk',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('chunk_index', models.PositiveIntegerField()),
                ('text', models.TextField()),
                ('weaviate_vector_id', models.CharField(blank=True, help_text='Identifier of the vector stored in Weaviate.', max_length=255)),
                ('metadata', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'ordering': ['chunk_index'],
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('external_ref', models.CharField(blank=True, max_length=255)),
                ('entity_type', models.CharField(max_length=64)),
                ('name', models.CharField(max_length=255)),
                ('metadata', models.JSONField(blank=True, default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('score', models.FloatField()),
                ('explanation', models.TextField(blank=True)),
                ('rank', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['rank', '-score'],
            },
        ),
        migrations.CreateModel(
            name='MatchingJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('running', 'Running'), ('complete', 'Complete'), ('failed', 'Failed')], default='queued', max_length=16)),
                ('config_override', models.JSONField(blank=True, default=dict)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('source_entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matching_jobs', to='core.entity')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MatchingTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('source_entity_type', models.CharField(max_length=64)),
                ('target_entity_type', models.CharField(max_length=64)),
                ('config', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'unique_together': {('name', 'source_entity_type', 'target_entity_type')},
            },
        ),
        migrations.CreateModel(
            name='MatchingJobTarget',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ranking_hint', models.FloatField(blank=True, null=True)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targeting_jobs', to='core.entity')),
                ('matching_job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targets', to='core.matchingjob')),
            ],
        ),
        migrations.AddField(
            model_name='matchingjob',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='core.matchingtemplate'),
        ),
        migrations.CreateModel(
            name='MatchFeature',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('label', models.CharField(max_length=128)),
                ('value_numeric', models.FloatField(blank=True, null=True)),
                ('value_text', models.TextField(blank=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='features', to='core.match')),
            ],
        ),
        migrations.AddField(
            model_name='match',
            name='matching_job',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='core.matchingjob'),
        ),
        migrations.AddField(
            model_name='match',
            name='source_entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_sources', to='core.entity'),
        ),
        migrations.AddField(
            model_name='match',
            name='target_entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_targets', to='core.entity'),
        ),
        migrations.AddIndex(
            model_name='entity',
            index=models.Index(fields=['entity_type'], name='core_entity_entity__5ca551_idx'),
        ),
        migrations.AddIndex(
            model_name='entity',
            index=models.Index(fields=['external_ref'], name='entity_external_ref_idx'),
        ),
        migrations.AddField(
            model_name='documentchunk',
            name='document',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='core.document'),
        ),
        migrations.AddField(
            model_name='document',
            name='entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='core.entity'),
        ),
        migrations.AlterUniqueTogether(
            name='matchingjobtarget',
            unique_together={('matching_job', 'entity')},
        ),
        migrations.AlterUniqueTogether(
            name='matchfeature',
            unique_together={('match', 'label')},
        ),
        migrations.AlterUniqueTogether(
            name='match',
            unique_together={('matching_job', 'target_entity')},
        ),
        migrations.AlterUniqueTogether(
            name='documentchunk',
            unique_together={('document', 'chunk_index')},
        ),
    ]
